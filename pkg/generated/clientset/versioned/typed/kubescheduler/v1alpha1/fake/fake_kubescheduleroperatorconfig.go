// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openshift/cluster-kube-scheduler-operator/pkg/apis/kubescheduler/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKubeSchedulerOperatorConfigs implements KubeSchedulerOperatorConfigInterface
type FakeKubeSchedulerOperatorConfigs struct {
	Fake *FakeKubeschedulerV1alpha1
}

var kubescheduleroperatorconfigsResource = schema.GroupVersionResource{Group: "kubescheduler.operator.openshift.io", Version: "v1alpha1", Resource: "kubescheduleroperatorconfigs"}

var kubescheduleroperatorconfigsKind = schema.GroupVersionKind{Group: "kubescheduler.operator.openshift.io", Version: "v1alpha1", Kind: "KubeSchedulerOperatorConfig"}

// Get takes name of the kubeSchedulerOperatorConfig, and returns the corresponding kubeSchedulerOperatorConfig object, and an error if there is any.
func (c *FakeKubeSchedulerOperatorConfigs) Get(name string, options v1.GetOptions) (result *v1alpha1.KubeSchedulerOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(kubescheduleroperatorconfigsResource, name), &v1alpha1.KubeSchedulerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KubeSchedulerOperatorConfig), err
}

// List takes label and field selectors, and returns the list of KubeSchedulerOperatorConfigs that match those selectors.
func (c *FakeKubeSchedulerOperatorConfigs) List(opts v1.ListOptions) (result *v1alpha1.KubeSchedulerOperatorConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(kubescheduleroperatorconfigsResource, kubescheduleroperatorconfigsKind, opts), &v1alpha1.KubeSchedulerOperatorConfigList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.KubeSchedulerOperatorConfigList{ListMeta: obj.(*v1alpha1.KubeSchedulerOperatorConfigList).ListMeta}
	for _, item := range obj.(*v1alpha1.KubeSchedulerOperatorConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kubeSchedulerOperatorConfigs.
func (c *FakeKubeSchedulerOperatorConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(kubescheduleroperatorconfigsResource, opts))
}

// Create takes the representation of a kubeSchedulerOperatorConfig and creates it.  Returns the server's representation of the kubeSchedulerOperatorConfig, and an error, if there is any.
func (c *FakeKubeSchedulerOperatorConfigs) Create(kubeSchedulerOperatorConfig *v1alpha1.KubeSchedulerOperatorConfig) (result *v1alpha1.KubeSchedulerOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(kubescheduleroperatorconfigsResource, kubeSchedulerOperatorConfig), &v1alpha1.KubeSchedulerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KubeSchedulerOperatorConfig), err
}

// Update takes the representation of a kubeSchedulerOperatorConfig and updates it. Returns the server's representation of the kubeSchedulerOperatorConfig, and an error, if there is any.
func (c *FakeKubeSchedulerOperatorConfigs) Update(kubeSchedulerOperatorConfig *v1alpha1.KubeSchedulerOperatorConfig) (result *v1alpha1.KubeSchedulerOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(kubescheduleroperatorconfigsResource, kubeSchedulerOperatorConfig), &v1alpha1.KubeSchedulerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KubeSchedulerOperatorConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeKubeSchedulerOperatorConfigs) UpdateStatus(kubeSchedulerOperatorConfig *v1alpha1.KubeSchedulerOperatorConfig) (*v1alpha1.KubeSchedulerOperatorConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(kubescheduleroperatorconfigsResource, "status", kubeSchedulerOperatorConfig), &v1alpha1.KubeSchedulerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KubeSchedulerOperatorConfig), err
}

// Delete takes name of the kubeSchedulerOperatorConfig and deletes it. Returns an error if one occurs.
func (c *FakeKubeSchedulerOperatorConfigs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(kubescheduleroperatorconfigsResource, name), &v1alpha1.KubeSchedulerOperatorConfig{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKubeSchedulerOperatorConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(kubescheduleroperatorconfigsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.KubeSchedulerOperatorConfigList{})
	return err
}

// Patch applies the patch and returns the patched kubeSchedulerOperatorConfig.
func (c *FakeKubeSchedulerOperatorConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.KubeSchedulerOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(kubescheduleroperatorconfigsResource, name, data, subresources...), &v1alpha1.KubeSchedulerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KubeSchedulerOperatorConfig), err
}
